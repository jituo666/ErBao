package com.xiaoyu.erbao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xiaoyu.erbao.DayRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DAY_RECORD.
*/
public class DayRecordDao extends AbstractDao<DayRecord, Long> {

    public static final String TABLENAME = "DAY_RECORD";

    /**
     * Properties of entity DayRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
        public final static Property Yesuan = new Property(2, Boolean.class, "yesuan", false, "YESUAN");
        public final static Property Aiai = new Property(3, Boolean.class, "aiai", false, "AIAI");
        public final static Property Sport = new Property(4, Boolean.class, "sport", false, "SPORT");
        public final static Property Yjstart = new Property(5, Boolean.class, "yjstart", false, "YJSTART");
        public final static Property Yjend = new Property(6, Boolean.class, "yjend", false, "YJEND");
        public final static Property Tiwen = new Property(7, Float.class, "tiwen", false, "TIWEN");
        public final static Property Szpl = new Property(8, Integer.class, "szpl", false, "SZPL");
        public final static Property Szzy = new Property(9, Integer.class, "szzy", false, "SZZY");
        public final static Property Baidai = new Property(10, Integer.class, "baidai", false, "BAIDAI");
        public final static Property Feeling = new Property(11, Integer.class, "feeling", false, "FEELING");
        public final static Property Symptom = new Property(12, String.class, "symptom", false, "SYMPTOM");
        public final static Property Note = new Property(13, String.class, "note", false, "NOTE");
    };


    public DayRecordDao(DaoConfig config) {
        super(config);
    }
    
    public DayRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DAY_RECORD' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DATE' INTEGER," + // 1: date
                "'YESUAN' INTEGER," + // 2: yesuan
                "'AIAI' INTEGER," + // 3: aiai
                "'SPORT' INTEGER," + // 4: sport
                "'YJSTART' INTEGER," + // 5: yjstart
                "'YJEND' INTEGER," + // 6: yjend
                "'TIWEN' REAL," + // 7: tiwen
                "'SZPL' INTEGER," + // 8: szpl
                "'SZZY' INTEGER," + // 9: szzy
                "'BAIDAI' INTEGER," + // 10: baidai
                "'FEELING' INTEGER," + // 11: feeling
                "'SYMPTOM' TEXT," + // 12: symptom
                "'NOTE' TEXT);"); // 13: note
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DAY_RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DayRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
 
        Boolean yesuan = entity.getYesuan();
        if (yesuan != null) {
            stmt.bindLong(3, yesuan ? 1l: 0l);
        }
 
        Boolean aiai = entity.getAiai();
        if (aiai != null) {
            stmt.bindLong(4, aiai ? 1l: 0l);
        }
 
        Boolean sport = entity.getSport();
        if (sport != null) {
            stmt.bindLong(5, sport ? 1l: 0l);
        }
 
        Boolean yjstart = entity.getYjstart();
        if (yjstart != null) {
            stmt.bindLong(6, yjstart ? 1l: 0l);
        }
 
        Boolean yjend = entity.getYjend();
        if (yjend != null) {
            stmt.bindLong(7, yjend ? 1l: 0l);
        }
 
        Float tiwen = entity.getTiwen();
        if (tiwen != null) {
            stmt.bindDouble(8, tiwen);
        }
 
        Integer szpl = entity.getSzpl();
        if (szpl != null) {
            stmt.bindLong(9, szpl);
        }
 
        Integer szzy = entity.getSzzy();
        if (szzy != null) {
            stmt.bindLong(10, szzy);
        }
 
        Integer baidai = entity.getBaidai();
        if (baidai != null) {
            stmt.bindLong(11, baidai);
        }
 
        Integer feeling = entity.getFeeling();
        if (feeling != null) {
            stmt.bindLong(12, feeling);
        }
 
        String symptom = entity.getSymptom();
        if (symptom != null) {
            stmt.bindString(13, symptom);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(14, note);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DayRecord readEntity(Cursor cursor, int offset) {
        DayRecord entity = new DayRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // yesuan
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // aiai
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // sport
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // yjstart
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // yjend
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // tiwen
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // szpl
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // szzy
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // baidai
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // feeling
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // symptom
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // note
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DayRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setYesuan(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setAiai(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setSport(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setYjstart(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setYjend(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setTiwen(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setSzpl(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setSzzy(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setBaidai(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setFeeling(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setSymptom(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setNote(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DayRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DayRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
