package com.xiaoyu.erbao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TEMPERATURE_RECORD.
*/
public class TemperatureRecordDao extends AbstractDao<TemperatureRecord, Long> {

    public static final String TABLENAME = "TEMPERATURE_RECORD";

    /**
     * Properties of entity TemperatureRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Date = new Property(0, Long.class, "date", true, "DATE");
        public final static Property Temperature = new Property(1, Integer.class, "temperature", false, "TEMPERATURE");
    };


    public TemperatureRecordDao(DaoConfig config) {
        super(config);
    }
    
    public TemperatureRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TEMPERATURE_RECORD' (" + //
                "'DATE' INTEGER PRIMARY KEY ," + // 0: date
                "'TEMPERATURE' INTEGER);"); // 1: temperature
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TEMPERATURE_RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TemperatureRecord entity) {
        stmt.clearBindings();
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(1, date);
        }
 
        Integer temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindLong(2, temperature);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TemperatureRecord readEntity(Cursor cursor, int offset) {
        TemperatureRecord entity = new TemperatureRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // date
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1) // temperature
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TemperatureRecord entity, int offset) {
        entity.setDate(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTemperature(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TemperatureRecord entity, long rowId) {
        entity.setDate(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TemperatureRecord entity) {
        if(entity != null) {
            return entity.getDate();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
