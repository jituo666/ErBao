package com.xiaoyu.erbao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xiaoyu.erbao.KnownledgeList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table KNOWNLEDGE_LIST.
*/
public class KnownledgeListDao extends AbstractDao<KnownledgeList, Integer> {

    public static final String TABLENAME = "KNOWNLEDGE_LIST";

    /**
     * Properties of entity KnownledgeList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property KnownlegeId = new Property(0, Integer.class, "knownlegeId", true, "KNOWNLEGE_ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Summary = new Property(2, String.class, "summary", false, "SUMMARY");
        public final static Property ThumPicUrl = new Property(3, String.class, "thumPicUrl", false, "THUM_PIC_URL");
        public final static Property ContentText = new Property(4, String.class, "contentText", false, "CONTENT_TEXT");
        public final static Property ContentUrls = new Property(5, String.class, "contentUrls", false, "CONTENT_URLS");
        public final static Property Date = new Property(6, java.util.Date.class, "date", false, "DATE");
        public final static Property Read = new Property(7, Boolean.class, "read", false, "READ");
        public final static Property Eyes = new Property(8, String.class, "eyes", false, "EYES");
        public final static Property Favorite = new Property(9, String.class, "favorite", false, "FAVORITE");
    };


    public KnownledgeListDao(DaoConfig config) {
        super(config);
    }
    
    public KnownledgeListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'KNOWNLEDGE_LIST' (" + //
                "'KNOWNLEGE_ID' INTEGER PRIMARY KEY ," + // 0: knownlegeId
                "'TITLE' TEXT," + // 1: title
                "'SUMMARY' TEXT," + // 2: summary
                "'THUM_PIC_URL' TEXT," + // 3: thumPicUrl
                "'CONTENT_TEXT' TEXT," + // 4: contentText
                "'CONTENT_URLS' TEXT," + // 5: contentUrls
                "'DATE' INTEGER," + // 6: date
                "'READ' INTEGER," + // 7: read
                "'EYES' TEXT," + // 8: eyes
                "'FAVORITE' TEXT);"); // 9: favorite
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'KNOWNLEDGE_LIST'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, KnownledgeList entity) {
        stmt.clearBindings();
 
        Integer knownlegeId = entity.getKnownlegeId();
        if (knownlegeId != null) {
            stmt.bindLong(1, knownlegeId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(3, summary);
        }
 
        String thumPicUrl = entity.getThumPicUrl();
        if (thumPicUrl != null) {
            stmt.bindString(4, thumPicUrl);
        }
 
        String contentText = entity.getContentText();
        if (contentText != null) {
            stmt.bindString(5, contentText);
        }
 
        String contentUrls = entity.getContentUrls();
        if (contentUrls != null) {
            stmt.bindString(6, contentUrls);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(7, date.getTime());
        }
 
        Boolean read = entity.getRead();
        if (read != null) {
            stmt.bindLong(8, read ? 1l: 0l);
        }
 
        String eyes = entity.getEyes();
        if (eyes != null) {
            stmt.bindString(9, eyes);
        }
 
        String favorite = entity.getFavorite();
        if (favorite != null) {
            stmt.bindString(10, favorite);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public KnownledgeList readEntity(Cursor cursor, int offset) {
        KnownledgeList entity = new KnownledgeList( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // knownlegeId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // summary
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // thumPicUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // contentText
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // contentUrls
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // date
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // read
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // eyes
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // favorite
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, KnownledgeList entity, int offset) {
        entity.setKnownlegeId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSummary(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setThumPicUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContentText(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContentUrls(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setRead(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setEyes(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFavorite(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(KnownledgeList entity, long rowId) {
        return entity.getKnownlegeId();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(KnownledgeList entity) {
        if(entity != null) {
            return entity.getKnownlegeId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
